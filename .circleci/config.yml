# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

orbs:
  kubernetes: circleci/kubernetes@1.3.1
  aws-eks: circleci/aws-eks@2.2.0

jobs:
  build:
    docker:
    # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv ~/.devops
            source ~/.devops/bin/activate
            make install

            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      - run:
          name: run lint
          command: |
            source ~/.devops/bin/activate
            make lint
  publish-image-dockerhub:
    docker:
      - image: cimg/base:2023.05
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run:
          name: Login docker
          command: |
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
      - run:
          name: Build docker image
          command: |
            image_name="$APP_NAME:rev-${CIRCLE_WORKFLOW_ID:0:7}"
            echo $image_name
            echo "$image_name" > imagename.txt
            echo "Building image name: ${image_name}"
            docker build -t $DOCKER_USERNAME/"$image_name" .

      - run:
          name: Push docker image
          command: |
            image_name=$( cat imagename.txt )

            echo "Pushing image name: ${image_name}"
            docker push $DOCKER_USERNAME/"$image_name"

            echo "Writing workflow id to kvdb after pushing done"
            curl -k https://kvdb.io/UFkymjGsJvx2GqaNaLpnRo/docker_${CIRCLE_WORKFLOW_ID:0:7} -d '1'        
  deploy-to-aws-eks:
    docker:
      - image: cimg/aws:2023.04
    parameters:
        cluster-name:
          description: Name of the EKS cluster
          type: string
    steps:
      - checkout
      #install kubectl
      - kubernetes/install-kubectl
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      
      - run:
          name: Get new version
          command: |
              latest_version=$( curl https://kvdb.io/7AiAwC67kGTnWWyt6acGGm/udahousefx_image_version )
              echo "Latest version ${latest_version}"
              # kubectl set image deployment/udahousefx udahousefx=tien4dev/udahousefx:"R${latest_version}"
              export IMAGE_TAG="R${latest_version}"
              
              echo "Image name: ${IMAGE_TAG}"

              circleci env subst < k8s/deployment_tpl.yml > k8s/deployment.yml
      - run:
          name: Test get version
          command: |
              cat k8s/deployment.yml
      
      - kubernetes/create-or-update-resource:
          resource-file-path: k8s/deployment.yml
          resource-name: deployment/udahousefx
          get-rollout-status: true
workflows:
  deploy-webapp-time-converter-pipeline:
    jobs:
      - build
      - publish-image-dockerhub:
          requires: [build]
          filters:
            branches:
              only: [main]
      - deploy-to-aws-eks:
          requires: [publish-image-dockerhub]
          cluster-name: toannv15-devops-capstone-cluster